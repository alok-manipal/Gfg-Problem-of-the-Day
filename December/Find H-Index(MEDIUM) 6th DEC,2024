///////Brute Force Method//////

We just ensure that after sorting in descending order we increment the idx++ only if the citation[i]>i as the q) states 
                            !!!!!!!!-->least H papers that have been cited at least H times.!!!!!!!!

int hIndex(vector<int>& citations) {        
        sort(citations.begin(),citations.end());
        reverse(citations.begin(),citations.end());
        int n=citations.size();
        int i=0,idx=0;
        while(i<n && citations[i]>i){
            idx++;
        }
        return idx;
}

//////OPTIMAL APPROACH/////////////

int hIndex(vector<int>& citations) {
        // code here
        int n=citations.size();
        
        vector<int> freq(n+1,0);
        
        for(int i=0;i<n;i++){
            if(citations[i]>=n) freq[n]+=1;
            else freq[citations[i]]+=1;
        }
        
        int idx=n;
        int s=freq[n];
        
        while(s<idx){
            idx--;
            s+=freq[idx];
        }
        return idx;
}

/*
The logic in the Optimized Solution is to create a vector<int> array of n+1 size those elements>=n are put at the end and the remaning are freq[citation[i]]+=1;
the indivual elements count is incremented.

To better explain the while loop part refer to the dry run, but a small working of it so we take int s=freq[n] and the int idx=n both the array s and idx are 
compared if s<idx(we have to ensure that s must have >=idx as in the q it say atleast) so we reduce idx-- and update the s array s+=freq[idx];  
finally return the idx

Dry Run:

Consider citations = [3, 0, 6, 1, 5].

n = 5
freq = [1, 1, 0, 1, 0, 2] (index 0 to 5)
Start: idx = 5, s = freq[5] = 2

s < idx → Continue the loop.
Decrement idx: idx = 4, s = 2 + freq[4] = 2 + 0 = 2

s < idx → Continue.
Decrement idx: idx = 3, s = 2 + freq[3] = 2 + 1 = 3

Now s >= idx → Exit the loop.
The h-index is 3.


*/
