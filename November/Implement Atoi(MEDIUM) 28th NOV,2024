int myAtoi(char *s) {
        // Your code here
        int sign=1,res=0,idx=0;
        
        while(s[idx]==' ') idx++;
        
        if(s[idx]=='+' || s[idx]=='-'){
            if(s[idx++]=='-') sign=-1;
        }
        
        while(s[idx]>='0' && s[idx]<='9'){
            if(res>(INT_MAX/10) || (res==(INT_MAX/10) && s[idx]-'0'>7)){
                return sign ==1 ? INT_MAX:INT_MIN;
            }
            res = 10*res+(s[idx++]-'0');
        }
        return res*sign;
}

/*
NOTE: 1)We first skip the empthy spaces. 2)We then proceed to check the sign of the number 
3)We then check for s[i] between 0 to 9 [***INT_MAX = 2147483647 (Maximum positive value),INT_MIN = -2147483648 (Minimum negative value)***]
So here we ensure that s[i]>INT_MAX will cause overflow  or if equal to INT_MAX it be ensure that it dosen't exceed 7.
And only when over-flow happens we compare it with INT_MAX/10 else we go do the normal res = res*10+(s[i]-'0')


***Question begins here****
Given a string s, the objective is to convert it into integer format without utilizing any built-in functions. Refer the below steps to know about atoi() function.

Cases for atoi() conversion:

Skip any leading whitespaces.
Check for a sign (‘+’ or ‘-‘), default to positive if no sign is present.
Read the integer by ignoring leading zeros until a non-digit character is encountered or end of the string is reached. If no digits are present, return 0.
If the integer is greater than 231 – 1, then return 231 – 1 and if the integer is smaller than -231, then return -231.
Examples:

Input: s = "-123"
Output: -123
Explanation: It is possible to convert -123 into an integer so we returned in the form of an integer
Input: s = "  -"
Output: 0
Explanation: No digits are present, therefore the returned answer is 0.
Input: s = " 1231231231311133"
Output: 2147483647
Explanation: The converted number will be greater than 231 – 1, therefore print 231 – 1 = 2147483647.
Input: s = "-999999999999"
Output: -2147483648
Explanation: The converted number is smaller than -231, therefore print -231 = -2147483648.
Input: s = "  -0012gfg4"
Output: -12
Explanation: Nothing is read after -12 as a non-digit character ‘g’ was encountered.
Constraints:
1 ≤ |s| ≤ 15
*/ 
