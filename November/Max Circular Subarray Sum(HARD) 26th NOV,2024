 int circularSubarraySum(vector<int> &arr) {

        // your code here
        int n=arr.size();
        int currMax=0,currMin=0;
        int maxSum=arr[0],minSum=arr[0],totalsum=0;
        for(int i=0;i<n;i++){
            currMax=max(currMax+arr[i],arr[i]);
            maxSum=max(currMax,maxSum);
            
            currMin=min(currMin+arr[i],arr[i]);
            minSum=min(currMin,minSum);
            
            totalsum+=arr[i];
        }   
        if(minSum==totalsum) return maxSum; // If all elements are negative, the max sum is the largest element (non-circular case) 
        
        return max(maxSum,totalsum-minSum);
}

/*
Given an array of integers arr[] in a circular fashion. Find the maximum subarray sum that we can get if we assume the array to be circular.

Examples:

Input: arr[] = [8, -8, 9, -9, 10, -11, 12]
Output: 22
Explanation: Starting from the last element of the array, i.e, 12, and moving in a circular fashion, we have max subarray as 12, 8, -8, 9, -9, 10, which gives maximum sum as 22.
Input: arr[] = [10, -3, -4, 7, 6, 5, -4, -1]
Output: 23
Explanation: Maximum sum of the circular subarray is 23. The subarray is [7, 6, 5, -4, -1, 10].
Input: arr[] = [-1, 40, -14, 7, 6, 5, -4, -1] 
Output: 52
Explanation: Circular Subarray [7, 6, 5, -4, -1, -1, 40] has the maximum sum, which is 52.

Constraints:
1 <= arr.size() <= 10^5
-10^4 <= arr[i] <= 10^4
*/
