int maxSubarraySum(vector<int> &arr) {
        // code here...
        int n=arr.size();
        int sum=arr[0];
        int maxi=arr[0];
        for(int i=1;i<n;i++){
            sum = max(arr[i],sum+arr[i]);
            maxi = max(maxi,sum);
        }
        return maxi;
}

/*
Given an integer array arr[]. You need to find and return the maximum sum possible from all the subarrays.

Examples:

Input: arr[] = [2, 3, -8, 7, -1, 2, 3]
Output: 11
Explanation: The subarray {7, -1, 2, 3} has the largest sum 11.
Input: arr[] = [-2, -4]
Output: -2
Explanation: The subarray {-2} has the largest sum -2.
Input: arr[] = [5, 4, 1, 7, 8]
Output: 25
Explanation: The subarray {5, 4, 1, 7, 8} has the largest sum 25.
Constraints:
1 ≤ arr.size() ≤ 10^5
-109 ≤ arr[i] ≤ 10^4
*/
