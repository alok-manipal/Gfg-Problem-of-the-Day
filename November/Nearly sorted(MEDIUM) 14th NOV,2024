void nearlySorted(vector<int>& arr, int k) {
        // code
        priority_queue<int,vector<int>,greater<int>> pq;
        int index=0;
        for(int i=0;i<arr.size();i++){
            pq.push(arr[i]);
            if(pq.size()>k){
                arr[index]=pq.top();
                index++;
                pq.pop();
            }
        }
        while(pq.size()>0){
            arr[index]=pq.top();
            index++;
            pq.pop();
        }
}

/*
Given an array arr[], where each element is at most k away from its target position, you need to sort the array optimally.
Note: You need to change the given array arr[] in place.

Examples:

Input: arr[] = [6, 5, 3, 2, 8, 10, 9], k = 3
Output: [2, 3, 5, 6, 8, 9, 10]
Explanation: The sorted array will be 2 3 5 6 8 9 10
Input: arr[]= [1, 4, 5, 2, 3, 6, 7, 8, 9, 10], k = 2
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Explanation: The sorted array will be 1 2 3 4 5 6 7 8 9 10
DO NOT use the direct library sort() function for this question.

Constraints:
1 ≤ arr.size() ≤ 10^6
0 ≤ k < arr.size()
1 ≤ arri ≤ 10^6 

Explantion:
So here we make use of a MinHeap(priority queue) in C++ we write it as priority_queue(int,vector<int>,greater<int>) pq;

so here we start adding the elemnts to pq pq.push(arr[i]) till the 

movement i>=k we will start to pop the elemnts from the first position of pq 
if(pq.size()>k){
arr[index] = pq.top(); // int index=0 is initalized in the starting
index++;
pq.pop();
}
then we check if the remaining elemnts that are remaning we then pop it too.

while(pq.size()>0){
arr[index]=pq.top();
index++;
pq.pop();
}

arr[]=[6, 5, 3, 2, 8, 10, 9], k=3

i=0 , pq = {6}
i=1 , pq = {5,6}
i=2 , pq = {3,5,6} 
i=3 , pq = {2,3,5,6} // it was supposed to be {2,3,5,6} as its size would 4>(k=3) so we pop the first element and get it to {3,5,6} ans so on...
*/
